module;

export module spargel.base.algorithm;

import spargel.base.meta;

export
namespace spargel::base {

template <typename T>
[[nodiscard]] constexpr T const& max(T const& a, T const& b)
{
    return a > b ? a : b;
}

namespace __swap {

struct swap_t {
    template <typename T>
    void operator()(T& lhs, T& rhs) const
    {
        tag_invoke(swap_t{}, lhs, rhs);
    }
};

template <typename T>
void tag_invoke(swap_t, T& lhs, T& rhs)
{
    T tmp = move(lhs);
    lhs = move(rhs);
    rhs = move(tmp);
}

}  // namespace __swap

inline constexpr __swap::swap_t swap{};

}

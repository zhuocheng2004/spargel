module;

#include <spargel/base/types.h>

export module spargel.base.string;

import spargel.base.allocator;
import spargel.base.container;

namespace spargel::base {

class cstring {
public:
    cstring() = default;

    cstring(char* data, ssize length) : _data{data}, _length{length} {}

    cstring(cstring&& other)
    {
        _data = other._data;
        _length = other._length;
        other._data = nullptr;
        other._length = 0;
    }

    ~cstring()
    {
        if (_data != nullptr) {
            default_allocator{}.deallocate(_data, _length + 1);
        }
    }

    ssize length() const
    {
        return _length;
    }

    char* data()
    {
        return _data;
    }
    char const* data() const
    {
        return _data;
    }

    char& operator[](ssize i)
    {
        return _data[i];
    }
    char const& operator[](ssize i) const
    {
        return _data[i];
    }

private:
    char* _data = nullptr;
    ssize _length = 0;
};

namespace __string {
export class string {
public:
    string() = default;
    string(char const* str);

    /// @brief length of string, in bytes
    ssize length() const
    {
        return _bytes.count();
    }

    char& operator[](ssize i)
    {
        return _bytes[i];
    }
    char const& operator[](ssize i) const
    {
        return _bytes[i];
    }

    cstring c_str() const;

private:
    vector<char> _bytes;
};
}  // namespace __string

export using __string::string;

}  // namespace spargel::base
